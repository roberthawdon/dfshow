# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import subprocess
import os
import re

# -- Functions ---------------------------------------------------------------

def get_version():
    """Get version from git describe or fallback file."""
    # Get the repository root (two levels up from docs/source/)
    repo_root = os.path.join(os.path.dirname(__file__), '..', '..')
    repo_root = os.path.abspath(repo_root)

    try:
        # Try to get version from git
        if os.path.exists(os.path.join(repo_root, '.git')) or os.environ.get('GITHUB_ACTIONS'):
            result = subprocess.run(
                ['git', 'describe', '--tags', '--dirty', '--always'],
                cwd=repo_root,  # Run git command from repository root
                capture_output=True,
                text=True,
                check=True
            )
            full_version = result.stdout.strip()

            # Remove 'v' prefix if present
            if full_version.startswith('v'):
                full_version = full_version[1:]

            # Extract short version (X.Y) from full version
            version_match = re.match(r'(\d+\.\d+)', full_version)
            short_version = version_match.group(1) if version_match else '1.0'

            return short_version, full_version

    except (subprocess.CalledProcessError, FileNotFoundError):
        pass

    # Fallback: try to read from tarball version file
    try:
        tarball_version_path = os.path.join(repo_root, '.tarball-version')
        if os.path.exists(tarball_version_path):
            with open(tarball_version_path, 'r') as f:
                full_version = f.read().strip()
                if full_version.startswith('v'):
                    full_version = full_version[1:]

                version_match = re.match(r'(\d+\.\d+)', full_version)
                short_version = version_match.group(1) if version_match else '1.0'

                return short_version, full_version
    except (IOError, OSError):
        pass

    # Final fallback
    return '1.0', '1.0.0-unknown'

# -- Project information -----------------------------------------------------

project = 'Directory File Show (DF-SHOW)'
copyright = '2025, Robert Ian Hawdon'
author = 'Robert Ian Hawdon'

# The short X.Y version
# version = '1.0'
# The full version, including alpha/beta/rc tags
# release = '1.0.0-b.1'

version, release = get_version()

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'DirectoryFileShowDF-SHOWdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'DirectoryFileShowDF-SHOW.tex', 'Directory File Show (DF-SHOW) Documentation',
     'Robert Ian Hawdon', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('show', 'show', 'An interactive directory/file browser written for Unix-like systems.',
     [author], 1),
    ('sf', 'sf', 'An interactive file viewer written for Unix-like systems.',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'DirectoryFileShowDF-SHOW', 'Directory File Show (DF-SHOW) Documentation',
     author, 'DirectoryFileShowDF-SHOW', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------
